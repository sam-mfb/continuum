// Hardcoded sprite data from orig/Sources/Figs.c

// Flame animation sprites - 32 frames, 7 bytes each
export const FLAME_WIDTH = 56 // 7 bytes * 8 bits
export const FLAME_HEIGHT = 32
export const FLAME_FRAMES = 32

export const flames: Uint8Array[] = [
  new Uint8Array([0x5A, 0xAC, 0x5A, 0x54, 0x38, 0x08, 0x10]),
  new Uint8Array([0x80, 0x6C, 0xB4, 0xC8, 0x50, 0x50, 0x20]),
  new Uint8Array([0x40, 0xA8, 0x7A, 0x94, 0x68, 0x50, 0x40]),
  new Uint8Array([0x80, 0x70, 0xA8, 0x54, 0x98, 0x60, 0x80]),
  new Uint8Array([0x30, 0x14, 0x4C, 0x36, 0x4A, 0x58, 0x80]),
  new Uint8Array([0x00, 0x10, 0x28, 0x34, 0x4C, 0x54, 0xAA]),
  new Uint8Array([0x08, 0x10, 0x2C, 0x58, 0x2C, 0xEA, 0x14]),
  new Uint8Array([0x00, 0x0C, 0x14, 0x68, 0x9C, 0x64, 0x1A]),
  
  new Uint8Array([0x0A, 0x14, 0x6E, 0xBA, 0x24, 0x1A, 0x04]),
  new Uint8Array([0x1A, 0x64, 0x9C, 0x68, 0x14, 0x0C, 0x00]),
  new Uint8Array([0x14, 0xEA, 0x2C, 0x58, 0x2C, 0x10, 0x08]),
  new Uint8Array([0xAA, 0x54, 0x4C, 0x34, 0x28, 0x10, 0x00]),
  new Uint8Array([0x80, 0x58, 0x4A, 0x36, 0x4C, 0x14, 0x30]),
  new Uint8Array([0x80, 0x60, 0x98, 0x54, 0xA8, 0x70, 0x80]),
  new Uint8Array([0x40, 0x50, 0x68, 0x94, 0x7A, 0xA8, 0x40]),
  new Uint8Array([0x20, 0x50, 0x50, 0xC8, 0xB4, 0x6C, 0x80]),
  
  new Uint8Array([0x10, 0x08, 0x38, 0x54, 0x5A, 0xAC, 0x5A]),
  new Uint8Array([0x08, 0x14, 0x14, 0x2A, 0x5A, 0x6C, 0x02]),
  new Uint8Array([0x04, 0x14, 0x2C, 0x52, 0xBC, 0x2A, 0x04]),
  new Uint8Array([0x02, 0x0C, 0x32, 0x54, 0x2A, 0x1C, 0x02]),
  new Uint8Array([0x02, 0x34, 0xA4, 0xD8, 0x64, 0x50, 0x18]),
  new Uint8Array([0xAA, 0x54, 0x64, 0x58, 0x28, 0x10, 0x00]),
  new Uint8Array([0x50, 0xAE, 0x68, 0x34, 0x68, 0x10, 0x20]),
  new Uint8Array([0xB0, 0x4C, 0x72, 0x2C, 0x50, 0x60, 0x00]),
  
  new Uint8Array([0x40, 0xB0, 0x48, 0xBA, 0xEC, 0x50, 0xA0]),
  new Uint8Array([0x00, 0x60, 0x50, 0x2C, 0x72, 0x4C, 0xB0]),
  new Uint8Array([0x20, 0x10, 0x68, 0x34, 0x68, 0xAE, 0x50]),
  new Uint8Array([0x00, 0x10, 0x28, 0x58, 0x64, 0x54, 0xAA]),
  new Uint8Array([0x18, 0x50, 0x64, 0xD8, 0xA4, 0x34, 0x02]),
  new Uint8Array([0x02, 0x1C, 0x2A, 0x54, 0x32, 0x0C, 0x02]),
  new Uint8Array([0x04, 0x2A, 0xBC, 0x52, 0x2C, 0x14, 0x04]),
  new Uint8Array([0x02, 0x6C, 0x5A, 0x2A, 0x14, 0x14, 0x08])
]

// Strafe sprites - 16 orientations, 8 bytes each
export const STRAFE_WIDTH = 64 // 8 bytes * 8 bits
export const STRAFE_HEIGHT = 8
export const STRAFE_FRAMES = 16

export const strafeDefs: Uint8Array[] = [
  new Uint8Array([0x24, 0x95, 0x5A, 0x3C, 0x3C, 0x00, 0x00, 0x00]),
  new Uint8Array([0x48, 0x2B, 0x3C, 0x3F, 0x0C, 0x00, 0x00, 0x00]),
  new Uint8Array([0x24, 0x15, 0x1A, 0x1E, 0x0D, 0x00, 0x00, 0x00]),
  new Uint8Array([0x0A, 0x0A, 0x1C, 0x1F, 0x0C, 0x0E, 0x01, 0x00]),
  
  new Uint8Array([0x02, 0x04, 0x19, 0x1E, 0x1C, 0x1B, 0x04, 0x02]),
  new Uint8Array([0x00, 0x01, 0x0E, 0x0C, 0x1F, 0x1C, 0x0A, 0x0A]),
  new Uint8Array([0x00, 0x00, 0x00, 0x0D, 0x1E, 0x1A, 0x15, 0x24]),
  new Uint8Array([0x00, 0x00, 0x00, 0x0C, 0x3F, 0x3C, 0x2B, 0x48]),
  
  new Uint8Array([0x00, 0x00, 0x00, 0x3C, 0x3C, 0x5A, 0x95, 0x24]),
  new Uint8Array([0x00, 0x00, 0x00, 0x30, 0xFD, 0x3C, 0xD4, 0x12]),
  new Uint8Array([0x00, 0x00, 0x00, 0xB0, 0x78, 0x78, 0xA4, 0x24]),
  new Uint8Array([0x00, 0x80, 0x70, 0x30, 0xF8, 0x38, 0x50, 0x50]),
  
  new Uint8Array([0x40, 0x20, 0x98, 0x78, 0x38, 0xD8, 0x20, 0x40]),
  new Uint8Array([0x50, 0x50, 0x38, 0xF8, 0x30, 0x70, 0x80, 0x00]),
  new Uint8Array([0x24, 0xA4, 0x78, 0x78, 0xB0, 0x00, 0x00, 0x00]),
  new Uint8Array([0x12, 0xD4, 0x3C, 0xFD, 0x30, 0x00, 0x00, 0x00])
]

// Digit and character sprites - 9 bytes each (height)
export const DIGIT_WIDTH = 8
export const DIGIT_HEIGHT = 9
export const SPACECHAR = 27 // Index of space character

export const digits: Uint8Array[] = [
  // 0-9
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC3]), // 0
  new Uint8Array([0xE7, 0xC7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7]), // 1
  new Uint8Array([0xC3, 0xB9, 0xF9, 0xF9, 0xF3, 0xE7, 0xCF, 0x9F, 0x81]), // 2
  new Uint8Array([0x81, 0xF3, 0xE7, 0xC3, 0xF9, 0xF9, 0xF9, 0xB9, 0xC3]), // 3
  new Uint8Array([0xF9, 0xF1, 0xE9, 0xD9, 0xB9, 0x80, 0xF9, 0xF9, 0xF9]), // 4
  new Uint8Array([0x81, 0x9F, 0x9F, 0x83, 0xF9, 0xF9, 0xF9, 0xB9, 0xC3]), // 5
  new Uint8Array([0xE3, 0xCF, 0x9F, 0x83, 0x99, 0x99, 0x99, 0x99, 0xC3]), // 6
  new Uint8Array([0x81, 0xF9, 0xF9, 0xF9, 0xF3, 0xE7, 0xE7, 0xE7, 0xE7]), // 7
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0xC3, 0x99, 0x99, 0x99, 0xC3]), // 8
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0x99, 0xC1, 0xF9, 0xF3, 0xC7]), // 9
  
  // A-Z
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0x81, 0x99, 0x99, 0x99, 0x99]), // A
  new Uint8Array([0x83, 0x99, 0x99, 0x99, 0x83, 0x99, 0x99, 0x99, 0x83]), // B
  new Uint8Array([0xC3, 0x9D, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9D, 0xC3]), // C
  new Uint8Array([0x83, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x83]), // D
  new Uint8Array([0x81, 0x9F, 0x9F, 0x9F, 0x87, 0x9F, 0x9F, 0x9F, 0x81]), // E
  new Uint8Array([0x81, 0x9F, 0x9F, 0x9F, 0x87, 0x9F, 0x9F, 0x9F, 0x9F]), // F
  new Uint8Array([0xC3, 0x9D, 0x9F, 0x9F, 0x91, 0x99, 0x99, 0x99, 0xC3]), // G
  new Uint8Array([0x99, 0x99, 0x99, 0x99, 0x81, 0x99, 0x99, 0x99, 0x99]), // H
  new Uint8Array([0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7]), // I
  new Uint8Array([0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0x99, 0x99, 0x99, 0xC3]), // J
  new Uint8Array([0x9C, 0x99, 0x93, 0x87, 0x8F, 0x87, 0x93, 0x99, 0x9C]), // K
  new Uint8Array([0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xC1]), // L
  new Uint8Array([0xBE, 0x9C, 0x88, 0x80, 0x80, 0x94, 0x9C, 0x9C, 0x9C]), // M
  new Uint8Array([0xBC, 0x9C, 0x8C, 0x84, 0x80, 0x90, 0x98, 0x9C, 0x9E]), // N
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC3]), // O
  new Uint8Array([0x83, 0x99, 0x99, 0x99, 0x83, 0x9F, 0x9F, 0x9F, 0x9F]), // P
  new Uint8Array([0xC3, 0x99, 0x99, 0x99, 0x99, 0x99, 0x89, 0x93, 0xC5]), // Q
  new Uint8Array([0x83, 0x99, 0x99, 0x99, 0x83, 0x99, 0x99, 0x99, 0x99]), // R
  new Uint8Array([0xC7, 0x9B, 0x9F, 0x8F, 0xC7, 0xE3, 0xF3, 0xB3, 0xC7]), // S
  new Uint8Array([0x81, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7]), // T
  new Uint8Array([0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC3]), // U
  new Uint8Array([0x99, 0x99, 0x99, 0x99, 0x99, 0xC3, 0xC3, 0xE7, 0xE7]), // V
  new Uint8Array([0x9C, 0x9C, 0x9C, 0x9C, 0x94, 0x80, 0x88, 0x9C, 0xB3]), // W
  new Uint8Array([0x99, 0x99, 0x99, 0x99, 0xC3, 0x99, 0x99, 0x99, 0x99]), // X
  new Uint8Array([0x99, 0x99, 0x99, 0x99, 0xC3, 0xE7, 0xE7, 0xE7, 0xE7]), // Y
  new Uint8Array([0x81, 0xF9, 0xF9, 0xF3, 0xE7, 0xCF, 0x9F, 0x9F, 0x81]), // Z
  
  // Special characters
  new Uint8Array([0xF7, 0xF7, 0xE3, 0xE3, 0xE3, 0xC1, 0xC1, 0x80, 0xBE]), // ship icon
  new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])  // space
]

// Note: In the original, digits are inverted (XOR 0xFF) during load_sbar()
// We'll handle this in the sprite viewer

// Bunker shot start positions
export const xbshotstart: number[][] = [
  [2, 13, 18, 22, 24, 21, 16, 10, -2, -13, -18, -22, -24, -21, -16, -10],
  [0, 3, 15, 31, 24, 31, 17, 3, 0, -3, -15, -31, -24, -31, -17, -3],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

export const ybshotstart: number[][] = [
  [-24, -21, -16, -10, 2, 13, 18, 22, 24, 21, 16, 10, -2, -13, -18, -22],
  [-24, -31, -17, -3, 0, 3, 15, 31, 24, 31, 17, 3, 0, -3, -15, -31],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

// Bunker center positions
export const xbcenter: number[][] = [
  [24, 24, 24, 23, 22, 22, 22, 24, 24, 24, 24, 25, 26, 26, 26, 24],
  [25, 22, 21, 14, 10, 13, 18, 22, 23, 26, 27, 34, 38, 35, 30, 26],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]
]

export const ybcenter: number[][] = [
  [26, 26, 26, 24, 24, 24, 24, 23, 22, 22, 22, 24, 24, 24, 24, 25],
  [38, 35, 30, 26, 25, 22, 21, 14, 10, 13, 18, 22, 23, 26, 27, 34],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]
]