/**
 * Bunker Sound Generator
 *
 * Recreates the bunker firing sound from the original Continuum game.
 * Based on do_bunk_sound() in Sound.c:208-234
 *
 * The original implementation:
 * - Generates a square wave with increasing period (decreasing frequency)
 * - Has two variants: BUNK_SOUND (louder) and SOFT_SOUND (quieter)
 * - Amplitude decreases over time creating a fade-out effect
 * - Creates a "bunk" or "thud" sound effect
 * - Used when bunkers fire at the player
 *
 * Technical details:
 * - Square wave generated by alternating amplitude values
 * - Period starts at 2 and increases by 1 each chunk
 * - Buffer divided into 5 chunks per frame
 * - Sound stops when period > 40
 * - Original wrote to every other byte (stereo format)
 */

import type { SampleGenerator } from '../sampleGenerator'
import { CHUNK_SIZE, CENTER_VALUE } from '../sampleGenerator'

// Sound type variants
export enum BunkerSoundType {
  NORMAL = 'NORMAL', // BUNK_SOUND - louder, faster fade
  SOFT = 'SOFT' // SOFT_SOUND - quieter, slower fade
}

// Constants from original
const CHUNKS_PER_BUFFER = 5 // Divide buffer into 5 chunks
const MAX_PERIOD = 40 // Stop when period exceeds this

// Parameters for each sound type
const SOUND_PARAMS = {
  [BunkerSoundType.NORMAL]: {
    startAmp: 104, // Starting amplitude value (104 = louder, further from 128)
    ampChange: 3, // Amplitude change per cycle (moves toward 128 faster)
    priority: 40 // Sound priority
  },
  [BunkerSoundType.SOFT]: {
    startAmp: 120, // Starting amplitude value (120 = quieter, closer to 128)
    ampChange: 1, // Amplitude change per cycle (moves toward 128 slower)
    priority: 30 // Sound priority
  }
}

export const createBunkerGenerator = (
  soundType: BunkerSoundType = BunkerSoundType.NORMAL
): SampleGenerator => {
  // Get parameters for this sound type
  const params = SOUND_PARAMS[soundType]

  // State variables (matching original)
  let period = 0 // Current period (controls frequency)
  let amp = 0 // Current amplitude (distance from center)
  let ampchange = 0 // Amplitude change rate
  let priority = 0 // Current priority
  let isActive = false
  let currentSign = 1 // Current amplitude sign for square wave

  // Auto-start on creation for testing
  let autoStart = true

  const generateChunk = (): Uint8Array => {
    const buffer = new Uint8Array(CHUNK_SIZE)

    // Auto-start on first generation if enabled
    if (autoStart && !isActive) {
      start()
      autoStart = false
    }

    if (!isActive || period > MAX_PERIOD || amp === CENTER_VALUE) {
      // Fill with silence
      buffer.fill(CENTER_VALUE)
      if (isActive) {
        if (period > MAX_PERIOD) {
          console.log(
            `Bunker sound (${soundType}) complete - period exceeded ${MAX_PERIOD}`
          )
        } else if (amp === CENTER_VALUE) {
          console.log(
            `Bunker sound (${soundType}) complete - amplitude reached center`
          )
        }
        isActive = false
      }
      return buffer
    }

    // Divide buffer into chunks like the original
    const samplesPerChunk = Math.floor(CHUNK_SIZE / CHUNKS_PER_BUFFER)
    let bufferIndex = 0

    // Process each chunk with increasing period
    for (let chunk = 0; chunk < CHUNKS_PER_BUFFER; chunk++) {
      // Current period for this chunk
      const chunkPeriod = period + chunk

      // Don't generate if period too high
      if (chunkPeriod > MAX_PERIOD) {
        // Fill rest with silence
        while (bufferIndex < CHUNK_SIZE) {
          buffer[bufferIndex++] = CENTER_VALUE
        }
        break
      }

      // Fill this chunk with square wave at current period
      const chunkEnd = Math.min(bufferIndex + samplesPerChunk, CHUNK_SIZE)
      let sampleCount = 0

      while (bufferIndex < chunkEnd) {
        // Generate square wave sample
        // The original uses amp as the actual sample value, alternating high/low
        const sample = currentSign > 0 ? amp : 255 - amp

        // Write sample
        buffer[bufferIndex++] = Math.max(0, Math.min(255, sample))
        sampleCount++

        // Toggle sign after 'period' samples
        if (sampleCount >= chunkPeriod) {
          currentSign = -currentSign
          sampleCount = 0
        }
      }
    }

    // After filling buffer, update parameters
    period += CHUNKS_PER_BUFFER - 1 // Net increase of 4 per buffer

    // Move amplitude toward center (128) for fade out
    if (amp < CENTER_VALUE) {
      amp += ampchange
      if (amp > CENTER_VALUE) amp = CENTER_VALUE
    } else {
      amp -= ampchange
      if (amp < CENTER_VALUE) amp = CENTER_VALUE
    }

    priority -= 1 // Decrease priority

    // Debug log
    if (period % 10 === 0 || period > 35) {
      console.log(
        `Bunker sound (${soundType}): period=${period}, amp=${amp}, priority=${priority}`
      )
    }

    return buffer
  }

  const reset = (): void => {
    // Initialize like in original start_sound()
    period = 2
    amp = params.startAmp
    ampchange = params.ampChange
    priority = params.priority
    isActive = true
    autoStart = false
    currentSign = 1
    console.log(
      `Bunker generator (${soundType}) reset - amp=${amp}, ampchange=${ampchange}`
    )
  }

  // Start the bunker sound
  const start = (): void => {
    console.log(`Bunker sound (${soundType}) starting`)
    reset()
  }

  // Stop the bunker sound
  const stop = (): void => {
    isActive = false
    period = 0
  }

  return {
    generateChunk,
    reset,
    // Extended interface for game integration
    start,
    stop
  } as SampleGenerator & { start: () => void; stop: () => void }
}
